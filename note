APIs Breakdown and Explanation:

1. User Signup and Login APIs
Signup API: http://localhost:5000/api/signup

Method: POST
Description:
This API is used for user registration. The user submits their email and password.
If the email is new, the system will create a new user record and return an access token (JWT) for that user.
This token is used in subsequent requests to authorize and authenticate the user.

Request > >
{
  "email": "admin@gmail.com",
  "password": "Password"
}

Response > >
{
    "message": "User registered successfully",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2Nzk5MWM3NzgxYjk3OTVjZjQyOGE3ZDIiLCJpYXQiOjE3MzgwODc1NDMsImV4cCI6MTczODA5MTE0M30.vWlBKRp7L2LwNzDCg-TMepuAV7_TUnMkMvHoN0o1-yQ"
}

======================================================================================================

2. Login API http://localhost:5000/api/login

Method: POST
Description:
If the email already exists in the database, the system logs the user in and generates an access token for the user.
The userâ€™s credentials (email and password) are validated, and if successful, the access token is returned.
Request > >
{
  "email": "admin@gmail.com",
  "password": "Password"
}

Response > >
{
    "message": "Login successful",
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2Nzk5MWM3NzgxYjk3OTVjZjQyOGE3ZDIiLCJpYXQiOjE3MzgwODc2NDgsImV4cCI6MTczODA5MTI0OH0.w6Ud8lcIxCOxwZNZNGjowI-4GAq53jDz9ibA_o8J-6M"
}

======================================================================================================

3. Tasks Management API
Task List API http://localhost:5000/api/tasks

Method: GET
Description:
This API retrieves a list of all tasks associated with the logged-in user.
The Authorization header must include the access token received from login/signup.

Example header > >
Authorization: Bearer <access_token>

======================================================================================================

4. Search and Pagination API http://localhost:5000/api/tasks?search=Complete&page=1&limit=10

Method: GET
Description: This API allows the user to search through tasks with a query string.
The results are paginated, meaning only a certain number of tasks (10 per page) are shown at a time.
Parameters:
search: The keyword or filter term to search for in task data (task titles or descriptions).
page: The page number to retrieve (for pagination).
limit: The number of items to display per page.

Request > >
GET http://localhost:5000/api/tasks?userId=6799cbadb328c8f947811534&limit=10&last_id=6799cc61b328c8f94781155d

Response > >
{
    "success": true,
    "data": [
        {
            "_id": "6799cc5eb328c8f94781155a",
            "userId": "6799cbadb328c8f947811534",
            "title": "Complete Tas1",
            "description": "add new",
            "completed": false,
            "createdAt": "2025-01-29T06:36:14.151Z",
            "updatedAt": "2025-01-29T06:36:14.151Z",
            "__v": 0
        },
        {
            "_id": "6799cbeab328c8f947811551",
            "userId": "6799cbadb328c8f947811534",
            "title": "Complete Task8",
            "description": "add new",
            "completed": false,
            "createdAt": "2025-01-29T06:34:18.530Z",
            "updatedAt": "2025-01-29T06:34:18.530Z",
            "__v": 0
        },
        {
            "_id": "6799cbe7b328c8f94781154e",
            "userId": "6799cbadb328c8f947811534",
            "title": "Complete Task7",
            "description": "add new",
            "completed": false,
            "createdAt": "2025-01-29T06:34:15.217Z",
            "updatedAt": "2025-01-29T06:34:15.217Z",
            "__v": 0
        },
        {
            "_id": "6799cbe3b328c8f94781154b",
            "userId": "6799cbadb328c8f947811534",
            "title": "Complete Task6",
            "description": "add new",
            "completed": false,
            "createdAt": "2025-01-29T06:34:11.037Z",
            "updatedAt": "2025-01-29T06:34:11.037Z",
            "__v": 0
        },
        {
            "_id": "6799cbe0b328c8f947811548",
            "userId": "6799cbadb328c8f947811534",
            "title": "Complete Task5",
            "description": "add new",
            "completed": false,
            "createdAt": "2025-01-29T06:34:08.075Z",
            "updatedAt": "2025-01-29T06:34:08.075Z",
            "__v": 0
        },
        {
            "_id": "6799cbdbb328c8f947811545",
            "userId": "6799cbadb328c8f947811534",
            "title": "Complete Task4",
            "description": "add new",
            "completed": false,
            "createdAt": "2025-01-29T06:34:03.615Z",
            "updatedAt": "2025-01-29T06:34:03.615Z",
            "__v": 0
        },
        {
            "_id": "6799cbd7b328c8f947811542",
            "userId": "6799cbadb328c8f947811534",
            "title": "Complete Task3",
            "description": "add new",
            "completed": false,
            "createdAt": "2025-01-29T06:33:59.340Z",
            "updatedAt": "2025-01-29T06:33:59.340Z",
            "__v": 0
        },
        {
            "_id": "6799cbd3b328c8f94781153f",
            "userId": "6799cbadb328c8f947811534",
            "title": "Complete Task2",
            "description": "add new",
            "completed": false,
            "createdAt": "2025-01-29T06:33:55.712Z",
            "updatedAt": "2025-01-29T06:33:55.712Z",
            "__v": 0
        },
        {
            "_id": "6799cbd0b328c8f94781153c",
            "userId": "6799cbadb328c8f947811534",
            "title": "Complete Task1",
            "description": "add new",
            "completed": false,
            "createdAt": "2025-01-29T06:33:52.296Z",
            "updatedAt": "2025-01-29T06:33:52.296Z",
            "__v": 0
        },
        {
            "_id": "6799cbccb328c8f947811539",
            "userId": "6799cbadb328c8f947811534",
            "title": "Complete Task",
            "description": "add new",
            "completed": false,
            "createdAt": "2025-01-29T06:33:48.766Z",
            "updatedAt": "2025-01-29T06:33:48.766Z",
            "__v": 0
        }
    ],
    "count": 10
}
======================================================================================================

Get Task Details API http://localhost:5000/api/tasks/{task_id}

Method: GET
Description:
This API fetches detailed information for a specific task identified by its unique task_id.
Example: 679918bdf00c9afc2fcf2304 is the task ID here.
Request > >
GET http://localhost:5000/api/tasks/679918bdf00c9afc2fcf2304

Response > >

{
    "_id": "679918bdf00c9afc2fcf2304",
    "userId": "679917cbf00c9afc2fcf22e4",
    "title": "Complete Task 3",
    "description": "add new data1",
    "completed": true,
    "createdAt": "2025-01-28T17:49:49.295Z",
    "updatedAt": "2025-01-28T18:00:23.667Z",
    "__v": 0
}


======================================================================================================

3. Task Operations API
Add Task API http://localhost:5000/api/tasks

Method: POST
Description:
This API allows users to create a new task. The task data (like title, description, etc.) is provided in the request body.
It also ensures no duplicate tasks can be added to the list (task titles or descriptions should be unique).
Request > >
{
  "title": "Complete the project",
  "description": "Finish the project by tomorrow",
  "userId":"679917cbf00c9afc2fcf22e4"
}

Response > >

{
    "status": 201,
    "data": {
        "userId": "679917cbf00c9afc2fcf22e4",
        "title": "Complete Task",
        "description": "add new",
        "completed": false,
        "_id": "67991ed281b9795cf428a7d6",
        "createdAt": "2025-01-28T18:15:46.729Z",
        "updatedAt": "2025-01-28T18:15:46.729Z",
        "__v": 0
    },
    "message": "Task create successfully"
}
======================================================================================================

Mark/Unmark Task Complete http://localhost:5000/api/tasks/${task_id}

Method: PUT
Description:
This API allows the user to mark a task as complete or incomplete by toggling its status.
The task_id identifies which task to mark/unmark.
The status change is reflected in the task.

Request > >
{
  "completed": true
}

Response > >

{
    "_id": "679918bdf00c9afc2fcf2304",
    "userId": "679917cbf00c9afc2fcf22e4",
    "title": "Complete Task 3",
    "description": "add new data1",
    "completed": true,
    "createdAt": "2025-01-28T17:49:49.295Z",
    "updatedAt": "2025-01-28T18:00:23.667Z",
    "__v": 0
}


http://localhost:5000/api/signup

http://localhost:5000/api/login

http://localhost:5000/api/tasks

http://localhost:5000/api/tasks?search=Complete&page=1&limit=10

http://localhost:5000/api/tasks/679918bdf00c9afc2fcf2304


To see ui response 
https://www.figma.com/design/UDFS9kGRx5zh8uBoDIpGvG/Untitled?node-id=0-1&t=7cWGoD0HjDkGPL4o-1
